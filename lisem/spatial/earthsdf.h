#ifndef EARTHSDF_H
#define EARTHSDF_H

//Earth map SDF using highly-compressed shape data
//from https://www.shadertoy.com/view/NtVSzy

/*

const int VECS_PER_FRAME = 50; //# of vectors to decompress per frame.
const int VECT_COUNT = 3040; //Total # of vectors (4096 max).
const int SHAPE_COUNT = 101; //Total # of shapes (256 max).
const float MAX_EXTENT = 756.0; //Max X/Y dim of the vector image for scaling (1024 max).
const vec2 ASPECT = vec2(2,1);

//Maps a linear address to a location in a 2D region.
ivec2 IdxToUV(int addr, ivec2 base, ivec2 size)
{
    return ivec2(addr % size.x, (addr / size.x) % size.y) + base;
}

//Maps a location in a 2D region to a linear address.
int UVToIdx(ivec2 uv, ivec2 base, ivec2 size)
{
    uv -= base;
    return (uv.x + uv.y * size.x);
}

//Outputs vector & shape data to the alpha channel on the 1st frame.
//Data will be sampled from the alpha channel on following frames.
//Avoids performace issues caused by the large arrays.
vec4 Initialize(ivec2 uv)
{
    int i = UVToIdx(uv, ivec2(0), ivec2(iResolution.xy));

    int vecdata = 0;

    //Vector data
    //Each int contains 4 bytes, each byte is a vector with 2 signed 4-bit (-8 - +7) components.
    const int vects[] = int[VECT_COUNT/4](
        0x4F0E2F41,0x412F3F5D,0x411F0E20,0xCF0DFF0F,0xEF0E200F,0xD1E2A0D3,0xFEFFD102,0xF0EEE0E1,
        0x13E0DEE2,0x11130324,0xCE0C4E20,0xE0E1DFFE,0x2303E1DF,0x17325032,0xDEB4F212,0x0E2AEBDC,
        0x311D204F,0x21D20212,0x02D0FF0E,0x01D02F22,0x010F1F21,0x311EEFE1,0x31435531,0x11E10152,
        0xCEDFE0E1,0xD0CEFEE0,0x0FEF0ECD,0x2F0F1F30,0xD0C20121,0x12F2D1F2,0xFEDFD0F1,0xFEE0CED0,
        0x3E11202F,0x4F51212F,0xE201315D,0xAFE12301,0x2E0EDEE0,0xD09E605F,0x3DCDFCEF,0x403E3AED,
        0xEF400E3F,0x20710ED0,0x3E5F0ECE,0xDC0C3B20,0x09CFDC0D,0x304C0DBB,0x606E4121,0x21305F7E,
        0x7671402F,0x71534602,0x03336134,0x616202C1,0xD0F1122F,0x112F2101,0xDFC004C5,0xD0FEF0F1,
        0xD201E1B5,0x70706201,0x91F11171,0xE102C0D1,0xC4C19191,0x94C0D392,0x9F9F9191,0xEF0F9E9E,
        0x2102F1E0,0x1E3F2F1F,0x1FFEF3D0,0x2203F2CE,0xD0EFB03E,0xAFAFD0DF,0xDCCFAFAF,0x725F7F3D,
        0x52505F41,0x52315234,0xD0B1C1F1,0xFE2F31F2,0x1E3101D1,0x02D206FF,0xFEE0C4B4,0x2B4D300B,
        0x0EEE0F2E,0xEFE33331,0xF2223EFE,0xEFE1B512,0x0C2EEE0C,0x2F20142F,0x03F0DF21,0xD2EF1E30,
        0xE0021F40,0xA0EF3FFF,0x22E190FF,0x301F3041,0xF1034E11,0x0E2E0EF0,0x2102E0EF,0x1EFFEC20,
        0x1EFF1EED,0xE2C0FF0D,0x42D5C2F3,0xC1024301,0x2D33F103,0xF103103D,0x2F331302,0x1CFD1C0D,
        0x1BDDD234,0xFEF2122E,0xE0FEEE0D,0x3114E203,0xE0EE0E4F,0x0D2F2104,0x2104F0FE,0x43314B19,
        0x36322243,0x03350714,0xE9F9DEE1,0xE0CDBBDC,0x02FFD3E1,0x312EEED1,0xFFD0E103,0x0D2F1A0B,
        0x0214552D,0xE1BCC2F2,0x30120712,0xAE0E0D2B,0x5151E2A0,0x04E22240,0xFC09DEE2,0xF332302C,
        0xF212F2F2,0x1E0BEFF3,0xED0C201F,0x2F2206E0,0x01F2F00E,0x1727072F,0x03F30732,0xF3073755,
        0x17240335,0x03311207,0x11F507E7,0xE2F603F2,0x12F105E0,0x4E4D0317,0xF5172331,0xD70607D3,
        0x022112E7,0xF4E50232,0x22202B21,0x05202D20,0x32C21433,0x300E3E22,0x0143F322,0x21F24131,
        0xE11336F2,0xE0ED1ECE,0xCF9FB2FE,0xAE9092D0,0xE7E7D7C7,0x032503E7,0x274403E4,0x43023227,
        0x05640224,0x36440422,0x230525F3,0x03B31230,0x030717F5,0xF7F7E334,0x02471704,0x22E7D313,
        0x22273631,0x440331E2,0xF5E4C407,0xD203F707,0x44A72203,0x124F2147,0xD20317E3,0x41320614,
        0x2204E2F3,0xE7C322E2,0xD4053305,0x022507E0,0x05D30225,0xF7F70731,0x03F0E3F7,0x22E507D2,
        0xE1C5F6D4,0xE712E322,0xBA0C9DC6,0x03C4B0CC,0xF715E531,0xF707F7E7,0x90909007,0x90909090,
        0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,
        0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,
        0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,0x09090909,
        0x09090909,0x09090909,0x09090909,0x70707070,0xEE707070,0xFE1F22F1,0x1F4002C1,0x1F30F1D0,
        0xD3D2D00F,0x0E4D3F20,0x0F2F03E0,0x0F2F11D1,0xD02001E0,0x5D2002C1,0xFBEEE0ED,0x4243F3D2,
        0xCC0D1F21,0x2254E1DF,0x01D0FF21,0xE1CF1F31,0xFD2F2021,0x30F303D0,0xE2DF0E2D,0x91EE3021,
        0x4002E0FF,0xB72F5011,0xC4E0D2B7,0xE1D2EFD0,0x2CD0B4E0,0xFE2D7D1E,0x0B4E0BBF,0x7D203220,
        0x5EFE2E3B,0x31205C21,0xB0D422D1,0xEF0274C2,0x2E3F02D2,0x14F2DF0D,0xEFFE0D3E,0xF22F34E3,
        0xDE301FDF,0xCE1031F1,0xEE2F32F1,0xDFDE1D0D,0xAFA2BF9F,0xA1417003,0x4E4022B2,0x40F2315F,
        0x312EED1E,0x742F4307,0x9CD2B321,0xEDE0A3D0,0xEF90DEA0,0x2BFD3EFD,0x524F7F6F,0x741362E2,
        0x02B1A0AE,0x5E4F5032,0x95A494E5,0x21C2F1B0,0x90DFE0C2,0x03E1E5E0,0xEF02D421,0x3A09FFC5,
        0x2F216AFE,0x4F7D6C0E,0x3E5F2F7E,0xDF405D5E,0xC0CD1EDE,0x31C3B034,0xE37E5042,0xD5B0CE91,
        0xBFA003B0,0x203FEEED,0xD202502F,0x301E2011,0xEEC11D2F,0x303E405F,0xB3217141,0xCEFEC0E4,
        0xA2E0EF3C,0xBFB0BEB0,0x2ECDEBEE,0xB03F0FBC,0x307E0FBE,0x72163265,0x414232E2,0x525F412F,
        0x0F316101,0x0F2001E0,0x2001F1FF,0x3101D00E,0x01B3DF0F,0xD00E1F7F,0xFF0F3101,0x2002F1F0,
        0xE0CC0F1F,0xF15033E2,0xED111FFF,0x05E1DE0F,0x0D2E2032,0x0C2002E1,0xE203B3FE,0x2012F212,
        0xEF1D1D3E,0x1F2001F1,0xE20533D3,0x3D0CCED1,0x21201D1D,0xE1EEFD0D,0xD2FE1FFF,0x0311D4F3,
        0x3F4E2031,0x2D0DD0EE,0x0FFE2F0E,0xCB0DFD5F,0x13F4E0FD,0xDFF132E2,0x04E1F5F2,0x20320626,
        0x0E4D0D1E,0x3F02F1E0,0x43517203,0x46142361,0x25172342,0x3E303346,0x2F540261,0x41E33F40,
        0x2FFE203E,0x32033013,0x09202337,0x6DEC2FF9,0x1B093A0C,0x1DFCF9F9,0x09EFFCFB,0x1DFE2DEF,
        0x0BEFEBF9,0xF4E0ECED,0xEEE90BEE,0x07C5D1D3,0x9294D717,0xD2BEF3D0,0x1DC02204,0xB3B1CFDE,
        0xE29494D0,0xE102D303,0xD10E3FFE,0xC91F2101,0xBFD0EEBF,0x9BCCCEA0,0xA09291BF,0x7F6E0EDF,
        0x2EFE5D20,0x2E0DBF0A,0x90DDBB1D,0x91C090BF,0xF2E2D0D2,0x22613215,0xDED0E323,0x07DF9F90,
        0x9F9FC302,0x0234C392,0x334043C3,0xD1014213,0x2111F1FF,0xE203C3E2,0x31D20332,0xC4C1D0E1,
        0xB604E2B2,0xC0D191C2,0xD402E2D2,0x04E5E0E2,0x91F4D2A4,0x9D9D9E90,0x9F9F9F90,0x9AFBAD9E,
        0xADBFB1BE,0xFEAD9E9C,0x9EB1C12B,0xD0CE0DDB,0xF2C02DDE,0xDFAFFEE0,0xC0D3D0DD,0xC0DDD0CC,
        0xDBD3C392,0x7E6B3B0C,0x2E52707F,0x30025172,0x417170FE,0x7172713F,0x71717070,0x70717070,
        0x4C5C6E40,0x5E7E506D,0x703E7D7F,0x503F2042,0x42414371,0x5F4E7060,0x5BEEBF0F,0x401F3D4E,
        0x7B3D497D,0x3C4C59DC,0x7D712F5D,0x7B403E7C,0xC00E6E7E,0x93C1E1D2,0x0FB0C292,0x5B502F7C,
        0x7D7F7C41,0x7D206E6A,0x715F707E,0x7A7F2070,0x5C5F213E,0x0EFE2F4F,0x5A7D2D5F,0xDF3B0A3B,
        0x402FEDEB,0xBCCCE0BD,0xFCEBDCDD,0x03322420,0x1B204343,0x3DFD6FFC,0x2304735E,0x3DFE0A30,
        0x0324322D,0x2E6903F1,0x36431530,0xF7E5F526,0xE3E7F7F7,0x06173202,0xE233B333,0xF4D60312,
        0x303E2E6F,0x2F3BEBCD,0xE7153073,0xF5E4D403,0x0350C422,0x93DEE213,0xE0FED0D6,0x27E5E00B,
        0x5003433E,0x423F3033,0x0DBDE207,0xE2D2B4CF,0x5302A0F4,0x6F3E2A50,0x16E21653,0x0397E407,
        0xB0C304D3,0xDFE1B7E4,0xC2FF6ABC,0x1DCEB3F2,0x6B2B1AC1,0x323EFB1C,0x32411205,0x0DDEFD3F,
        0xEC5D522F,0xD2EFB01D,0xD3D4CECC,0xCC2D0DE0,0xCE61213C,0xDFEE0ECD,0xB1BECDFD,0xE513A1F3,
        0xA1F6D4C3,0xFFD002E0,0x407E33D3,0x4E4F4323,0x2F42102F,0x14E54160,0xC39103A5,0xA3C26234,
        0xE3C4A2C2,0x90D1F2E0,0x9203D2CF,0xED4EEFB0,0x623E0B2F,0x990E2273,0x1DD0E20B,0x14DFFD5C,
        0xF3C0DEC3,0xB00242D3,0xFDEDE00E,0xFD533EBC,0x29B1CEA9,0x09091B0B,0x1CDD0BF9,0xDA0DFE0E,
        0xEC3AFFE3,0xC402D2BD,0xDFF215F4,0x132D09EC,0xED2C2F2D,0xEFE0F3D2,0xE0FDE0E3,0x3F2103E3,
        0xD2C10220,0x3507F706,0xFC0A1C3F,0x1706111B,0x222F44E6,0x05314402,0x14362445,0xEF0F2012,
        0x2E1102F1,0x0E3101D0,0x11F20221,0xE412503F,0xF2E0FEE0,0x35372122,0x130323C1,0x1E3E12F2,
        0x04E20220,0x3E11C7E5,0x2F21300E,0x12533222,0xDFD0F2D2,0xE1E090F1,0xF1EEDFE0,0x2F402133,
        0x23203F60,0x01C0E131,0x21021231,0x0760F2E1,0x27362F24,0x04C23227,0x24320222,0xE507C603,
        0x07C1CED1,0x024206D7,0xA0D305E2,0x023202F2,0x310615F1,0x124E2102,0xE7D0E3F2,0x0707B605,
        0xF607B1F3,0xE2D0F233,0xF7053031,0xC1E4C7D7,0xF0C40412,0xFECFFEEE,0x2F0B3E3C,0x0EDEE0FF,
        0x0BD0E1C1,0x0FEEA9EB,0x0DEE0D2E,0xDECF1EFF,0xE1DFF2F0,0xC0EFFEE0,0xAEFECFFD,0x5F7F7FDD,
        0x42246351,0x1F413344,0x0C4EDBCF,0xFFE1E0AA,0xFF0D3EF9,0x9B9A0B09,0x02D2F2CC,0x32C30211,
        0x90D10110,0xFEE0E191,0xFEC1D0DF,0x707070EF,0xA0CE2F20,0x9C9C9DBF,0xAC2F0EDD,0xC2D0CDCF,
        0xEDEF90C1,0x31201EFE,0x300E2F70,0xDD0E2E31,0x2F322F0F,0xFE0FDFCC,0x32C102E1,0xDECCD0E4,
        0xD1A2D2E0,0x9EE2EFC0,0xDB9C9E9D,0xE0EFFCCC,0xFFDFD0E1,0x32401F0E,0xAC0E2F30,0xA2C293CF,
        0x9BCD9091,0x1E600FEF,0xB0EF6C7D,0xC0B1E19F,0x90D1C3D3,0x2EFF91D1,0x306F6E6C,0x41705D4F,
        0x7F7F703F,0x50502EBC,0x5F5E4F3E,0xEE0DEDFF,0x9DFEDED0,0xDFFEADEE,0xB0AF90F1,0x5E0FBDBE,
        0x406E5F6F,0x7F7F7F3F,0x5D0EEE50,0xFC6D5D30,0x5D29FB1F,0x6B0DEE1F,0xFF0F2E7E,0xD193C1EF,
        0xA0E10111,0xB1226304,0xD0B3E3D1,0xFECE9DAD,0xDFEE0DD0,0xEDCCFDDE,0x5D0FDE0E,0x6E11207F,
        0x3E4E304E,0x4F3E7F30,0xB10E5D7E,0x90939192,0x9491C2D1,0xC2B0D293,0x02252622,0x9E9E9FD0,
        0x9C9B9D9E,0xAF9ECDBF,0xF19190C1,0xBFC09190,0xACCECCCE,0xBB9FB092,0xCF9D9FC0,0x1DECBC9C,
        0x0FFF0EEC,0x7E515F3D,0x7F707E7D,0x2F7E7E7F,0x73715170,0x7E413F7F,0x3F7D7D7F,0x4E707141,
        0x0B1F7E0A,0x0D2DFEB9,0x4D7B0ECC,0x4E5D5F6D,0x423F604E,0x503F5071,0x6252502F,0x12424261,
        0x43737074,0xE1013142,0x17076607,0xE1DFD323,0xC201DFC0,0xB7C1E304,0x02337012,0x2203C7C5,
        0x4203F103,0x2F702171,0x3E0DDE0F,0x2E0EEF0F,0x705E3EFF,0x0EDE0E3F,0xDFDEC0B3,0x7D5F3E0F,
        0x4E3C4D7F,0xFE3F0F2F,0xD1E1E2C0,0xD3E1F2E2,0x0E1FFFE1,0xCEE0D1F0,0xFFD0FF0F,0xF212204B,
        0x3F400211,0x5E4D2D4D,0x0DBC0F3E,0xD0DF0F1E,0xB0CEDDEE,0xFFFACECE,0xFF0F4E0E,0x203F302E,
        0x335F7041,0x42F5F205,0x204B6E60,0x01300422,0x211044F2,0x34314312,0x23606F14,0xD3910111,
        0x01F1F3E0,0x6034E237,0x2C41C462,0x0B1F2621,0x4F413F1D,0x21432341,0xD0DC0E1F,0xB0CDEDDE,
        0x9FBCE0C3,0x5CDF0DDF,0x0E207D20,0x6E3E0DBC,0x21661070,0x63115303,0x23202F54,0x053431F2,
        0xE513F437,0x03E204D1,0xDFD1D5C7,0x1C1CFDFE,0x01E3C1D0,0xE302202F,0x13212F12,0x0D3F0E2F,
        0x13E1DCEE,0x13F2D122,0xAFEFFE21,0x3111E1A0,0x3231303F,0xE1B1E11F,0xF2313001,0x2EFE2F20,
        0x312123FE,0xDEDFEF30,0x512130EF,0x02421032,0xE1F1D1E1,0x21012301,0x1322201D,0xEFFFEFD1,
        0xF2C301D3,0x0AEED0D1,0xFD0C2E2D,0x3F1DFEEE,0x0EEFE0E3,0xD3D0E2CD,0x0121E1D0,0xB2EF0DC1,
        0xFEEEA0E1,0x2F0F3E1E,0x3E313140,0x303F4E20,0x2344422F,0xF1DEEC0F,0x0DFD3234,0x2112F3F0
    );

    //Shape data
    //Bit layout:31--Index--20,19--YPos--10,9--XPos--0
    //Defines the vertex index and absolute location of each shape's 1st point.
    const int shapes[] = int[SHAPE_COUNT](
        0x00094D65,0x02997D57,0x037A4137,0x048A0CB5,0x04EA00BA,0x0539A0BB,0x0582F2C0,0x0713A2CE,
        0x08A34292,0x09639E9F,0x0FE2B9F4,0x10625117,0x10A290E7,0x1114F5CC,0x12B7381A,0x1305E4A1,
        0x135770B4,0x146724BF,0x14B73CC9,0x159724D6,0x15E78CBE,0x16288967,0x1668BD75,0x17283D94,
        0x17783DA9,0x17DB358C,0x1A0B35C8,0x1A7B49DD,0x1B1B3DE3,0x1B7B3DEB,0x1BCA89DA,0x1D3A7DC8,
        0x1D8B2E30,0x1E6B2237,0x1EE79662,0x1F5AE689,0x201AE295,0x20AA9EE0,0x210A16F1,0x2150C400,
        0x3734DADB,0x3774CAD8,0x37C4F2C0,0x380496BC,0x38754EB3,0x38B55AB4,0x38F562AD,0x393592A7,
        0x3985AAA3,0x3A255E6D,0x3A957276,0x3AE58E7C,0x3B35BE72,0x3B95BA6D,0x3BE60E6F,0x3C75D284,
        0x3EF5525D,0x3F456261,0x3F95625B,0x3FF5C244,0x40368E5B,0x4076A65D,0x40B60668,0x42763E53,
        0x4406920B,0x44864A2A,0x46F6926A,0x47B72660,0x49B8EA8C,0x4C39F8DA,0x4C7A14BF,0x4CCA78BE,
        0x4D09784C,0x4D697405,0x4DA9E005,0x4E19C022,0x4E7B0872,0x4EBB187A,0x4F3B2C93,0x4F7B208A,
        0x503AE087,0x508AF488,0x514AC895,0x524AF87D,0x543B0486,0x5489D504,0x5A6ADD3A,0x5AA1C8ED,
        0x5AF8A0CE,0x7D3B54E1,0x81EB04A4,0x8249B588,0x828A41B9,0xB5C904B0,0xB698ECAE,0xB758E8B2,
        0xB8196243,0xB898AD9D,0xBB08FDCE,0xBD48B8BB,0xBDA8CCC2
    );

    //Output vectors (hi-byte = shape index, lo-byte = 8-bit vector
    if(i < VECT_COUNT)
    {
        int bytevec = (vects[i/4] >> ((i%4)*8));
        int shpidx = 0;
        for(int j = 0;j < SHAPE_COUNT;j++)
        {
            if(i >= ((shapes[j]>>20)&0xFFF))
            {
                shpidx = j;
            }
            else
            {
                break;
            }
        }

        vecdata = ((shpidx&0xFF) << 8) | (bytevec&0xFF);
    }
    else
    {
        i -= VECT_COUNT;

        //Output shape origins (X/Y)
        //1 component per-pixel since only the alpha channel is free.
        if(i < SHAPE_COUNT*2)
        {
            vecdata = (shapes[i/2] >> 10*(i%2))&0x3FF;
        }
        else //Output 0s for every other address.
        {
            vecdata = 0;
        }
    }

    return vec4(1e6, 0, 0, vecdata);
}

//Get 8-bit vector 'i' from alpha channel
//and unpack into a vec2 (X,Y) and shape index (Z).
vec3 GetVector(int i)
{
        int v = int(texelFetch(iChannel0, IdxToUV(i, ivec2(0), ivec2(iResolution.xy)), 0).a);

        int vx = bool(v&0x08) ? -((~v+1)&0x0F) : v&0x0F;
        v = v >> 4;
        int vy = bool(v&0x08) ? -((~v+1)&0x0F) : v&0x0F;
        v = v >> 4;

        return vec3(vec2(vx, vy) / MAX_EXTENT, v&0xFF);
}

//Get the absolute location of the 1st of shape 'i'.
vec2 GetShapeOrigin(int i)
{
    i = VECT_COUNT+i*2;
    ivec2 iRes = ivec2(iResolution.xy);
    return vec2(
        texelFetch(iChannel0, IdxToUV(i  , ivec2(0), iRes), 0).a,
        texelFetch(iChannel0, IdxToUV(i+1, ivec2(0), iRes), 0).a
    ) / MAX_EXTENT;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    fragColor = texelFetch(iChannel0, ivec2(fragCoord),0);

    //Initialize vector data on 1st frame, stored in alpha channel.
    if(iFrame == 0)
    {
        fragColor = Initialize(ivec2(fragCoord));
    }
    //Create SDF from the vector data.
    else if(iFrame <= (VECT_COUNT/VECS_PER_FRAME+1))
    {
        int vidx = (iFrame-1)*VECS_PER_FRAME;
        vec2 p = fragCoord / iResolution.xy;
        vec2 p0 = fragColor.yz;
        float sdf = fragColor.x;

        for(int i = 0;i < VECS_PER_FRAME;i++)
        {
            if(vidx >= VECT_COUNT) { break; } //Stop if loop goes past the last vector.

            vec3 curvec = GetVector(vidx);
            vec3 prevec = GetVector(vidx-1);

            //Get the abs. position for the 1st point.
            //If the shape index changes, set p0 to the abs. position of the new shape.
            if(vidx == 0 || curvec.z != prevec.z)
            {
                p0 = GetShapeOrigin(int(curvec.z));
            }

            vec2 p1 = p0 + curvec.xy;

            //Line drawing
            vec2 line = p1 - p0;
            float frac = dot(p - p0,line) / dot(line,line);
            vec2 pnear = (p0 + line * clamp(frac, 0.0, 1.0)) - p;
            pnear.x = mod(pnear.x+0.5,1.0)-0.5; //Make SDF tile horizontally.
            float dline = length(pnear * ASPECT);
            sdf = min(abs(sdf), dline) * sign(sdf); //Combine with SDF (ignoring sign)

            //N-Gon filling for sign
            if(p.y >= min(p0.y,p1.y) && p.y < max(p0.y,p1.y)) //If p.y is between the highest & lowest point.
            {
                if(p.x > mix(p0.x, p1.x, (p.y-p0.y)/(p1.y-p0.y))) //If p.x is to the left of the line.
                {
                    sdf = -sdf; //Flip the sign
                }
            }


            p0 = p1;
            vidx++;
        }

        fragColor.xyz = vec3(sdf, p0);

        //Clear y/z/w channels, put resolution into y,z for re-scaling.
        if(vidx >= VECT_COUNT)
        {
            fragColor = vec4(fragColor.x,iResolution.xy,0);
        }
    }
    else
    {
        //Re-scale texture when going full-screen (doesn't work when exiting full screen).
        vec2 preres = texelFetch(iChannel0,ivec2(0),0).yz;

        if(preres.xy != iResolution.xy)
        {
            vec2 uv = (fragCoord / iResolution.xy) * (preres.xy/iResolution.xy);
            fragColor.x = texture(iChannel0,uv,0.).x;
            fragColor.yz = iResolution.xy;
        }
    }


}*/



#endif // EARTHSDF_H
