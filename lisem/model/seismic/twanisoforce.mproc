# elements of symmetric stiffness matrix (6x6)
# Note that the constant is 10 for the diagonal elements
c1:= 10+sin(omm*x+ph1)*cos(omm*y+ph1)*sin(omm*z+ph1);
c2:= 2+sin(omm*x+ph2)*cos(omm*y+ph1)*sin(omm*z+ph2);
c3:= 2+sin(omm*x+ph3)*cos(omm*y+ph2)*sin(omm*z+ph3);
c4:= 2+sin(omm*x+ph4)*cos(omm*y+ph2)*sin(omm*z+ph4);
c5:= 2+sin(omm*x+ph5)*cos(omm*y+ph3)*sin(omm*z+ph5);
c6:= 2+sin(omm*x+ph6)*cos(omm*y+ph3)*sin(omm*z+ph6);
c7:= 10+sin(omm*x+ph7)*cos(omm*y+ph4)*sin(omm*z+ph7);
c8:= 2+sin(omm*x+ph8)*cos(omm*y+ph4)*sin(omm*z+ph8);
c9:= 2+sin(omm*x+ph9)*cos(omm*y+ph5)*sin(omm*z+ph9);
c10:= 2+sin(omm*x+ph10)*cos(omm*y+ph5)*sin(omm*z+ph1);
c11:= 2+sin(omm*x+ph11)*cos(omm*y+ph6)*sin(omm*z+ph2);
c12:= 10+sin(omm*x+ph12)*cos(omm*y+ph6)*sin(omm*z+ph3);
c13:= 2+sin(omm*x+ph13)*cos(omm*y+ph7)*sin(omm*z+ph4);
c14:= 2+sin(omm*x+ph14)*cos(omm*y+ph7)*sin(omm*z+ph5);
c15:= 2+sin(omm*x+ph15)*cos(omm*y+ph8)*sin(omm*z+ph6);
c16:= 10+sin(omm*x+ph16)*cos(omm*y+ph8)*sin(omm*z+ph7);
c17:= 2+sin(omm*x+ph17)*cos(omm*y+ph9)*sin(omm*z+ph8);
c18:= 2+sin(omm*x+ph18)*cos(omm*y+ph9)*sin(omm*z+ph9);
c19:= 10+sin(omm*x+ph19)*cos(omm*y+ph10)*sin(omm*z+ph10);
c20:= 2+sin(omm*x+ph20)*cos(omm*y+ph10)*sin(omm*z+ph11);
c21:= 10+sin(omm*x+ph21)*cos(omm*y+ph10)*sin(omm*z+ph12);

# exact (manufactured) solution
u:=sin(om*(x-cv*t))*sin(om*y+ph)*sin(om*z+ph);
v:=sin(om*x+ph)*sin(om*(y-cv*t))*sin(om*z+ph);
w:=sin(om*x+ph)*sin(om*y+ph)*sin(om*(z-cv*t));

# density
rho := amprho*(2 + sin(omm*x+phm)*cos(omm*y+phm)*sin(omm*z+phm) );

ux:=diff(u,x);
uy:=diff(u,y);
uz:=diff(u,z);
vx:=diff(v,x);
vy:=diff(v,y);
vz:=diff(v,z);
wx:=diff(w,x);
wy:=diff(w,y);
wz:=diff(w,z);
sig1:=c1*ux+c2*uy+ c3*uz+c2*vx+ c4*vy+ c5*vz+ c3*wx+ c5*wy+ c6*wz;
sig2:=c2*ux+c7*uy+ c8*uz+c7*vx+ c9*vy+c10*vz+ c8*wx+c10*wy+c11*wz;
sig3:=c3*ux+c8*uy+c12*uz+c8*vx+c13*vy+c14*vz+c12*wx+c14*wy+c15*wz;
sig4:=c4*ux+c9*uy+c13*uz+c9*vx+c16*vy+c17*vz+c13*wx+c17*wy+c18*wz;
sig5:=c5*ux+c10*uy+c14*uz+c10*vx+c17*vy+c19*vz+c14*wx+c19*wy+c20*wz;
sig6:=c6*ux+c11*uy+c15*uz+c11*vx+c18*vy+c20*vz+c15*wx+c20*wy+c21*wz;

r1:= diff(sig1,x)+diff(sig2,y)+diff(sig3,z);
r2:= diff(sig2,x)+diff(sig4,y)+diff(sig5,z);
r3:= diff(sig3,x)+diff(sig5,y)+diff(sig6,z);

fu:= rho*diff(diff(u,t),t) - r1;
fv:= rho*diff(diff(v,t),t) - r2;
fw:= rho*diff(diff(w,t),t) - r3;

with(codegen);
threecomp := vector([fu,fv,fw]);

twanisoforce := makeproc(threecomp,parameters=[x,y,z,t,om,cv,ph,omm,phm,amprho,ph1,ph2,ph3,ph4,ph5,ph6,ph7,ph8,ph9,ph10,ph11,ph12,ph13,ph14,ph15,ph16,ph17,ph18,ph19,ph20,ph21]);

#fortran(twanisoforce,optimized);

futt := diff(diff(fu,t),t);
fvtt := diff(diff(fv,t),t);
fwtt := diff(diff(fw,t),t);

forces := vector([futt,fvtt,fwtt]);
twanisoforcett := makeproc(forces,parameters=[x,y,z,t,om,cv,ph,omm,phm,amprho,ph1,ph2,ph3,ph4,ph5,ph6,ph7,ph8,ph9,ph10,ph11,ph12,ph13,ph14,ph15,ph16,ph17,ph18,ph19,ph20,ph21]);

#fortran(twanisoforcett,optimized);

# forcing for normal stress boundary conditions with normal = (0, 0, 1)^T
fsurf1 := sig3;
fsurf2 := sig5;
fsurf3 := sig6;
bforces := vector([fsurf1, fsurf2, fsurf3]);
twanisofreesurfz := makeproc(bforces,parameters=[x,y,z,t,om,cv,ph,omm,ph1,ph2,ph3,ph4,ph5,ph6,ph7,ph8,ph9,ph10,ph11,ph12,ph13,ph14,ph15,ph16,ph17,ph18,ph19,ph20,ph21]);

fortran(twanisofreesurfz,optimized);

